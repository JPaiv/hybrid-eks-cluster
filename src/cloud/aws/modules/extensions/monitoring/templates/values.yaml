prometheus:
  ingress:
    enabled: true
    ingressClassName: alb
    annotations:
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      alb.ingress.kubernetes.io/healthcheck-path: "/"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
      alb.ingress.kubernetes.io/load-balancer-name: "${id_label}-prometheus"
      alb.ingress.kubernetes.io/scheme: internal
      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-2019-08
      alb.ingress.kubernetes.io/success-codes: 200,302
      alb.ingress.kubernetes.io/tags: helm=true,name=${id_label},stage=${stage},team=DevSecOps,tofu=true
      alb.ingress.kubernetes.io/target-type: ip
    labels:
      app.kubernetes.io/component: kube-prometheus-stack
      app.kubernetes.io/instance: prometheus
      app.kubernetes.io/managed-by: tofu-helm
      app.kubernetes.io/name: ${id_label}
      app.kubernetes.io/part-of: monitoring
      app.kubernetes.io/stage: ${stage}
      app.kubernetes.io/version: ${chart_version}
    hosts:
      - ${domain_name}
    tls:
      - hosts:
          - ${domain_name}
    path: /

  prometheusSpec:
    # -- General
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false

    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ${id_label}
          accessModes:
            - ReadWriteOnce
          resources:
            limits:
              storage: 100Gi
            requests:
              storage: 50Gi

    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 200Mi

  resources:
    resources:
      limits:
        cpu: 1
        memory: 1Gi
      requests:
        cpu: 200m
        memory: 200Mi

grafana:
  enabled: true
  adminPassword: ${password}
  defaultDashboardsEnabled: true
  defaultDashboardsTimezone: browser
  ingress:
    enabled: true
    ingressClassName: alb
    annotations:
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      alb.ingress.kubernetes.io/healthcheck-path: "/"
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS":443}, {"HTTP":80}]'
      alb.ingress.kubernetes.io/load-balancer-name: "${id_label}-grafana"
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-FS-1-2-2019-08
      alb.ingress.kubernetes.io/success-codes: 200,302
      alb.ingress.kubernetes.io/tags: helm=true,name=${id_label},stage=${stage},team=DevSecOps,tofu=true
      alb.ingress.kubernetes.io/target-type: ip
    labels:
      app.kubernetes.io/component: kube-prometheus-stack
      app.kubernetes.io/instance: grafana
      app.kubernetes.io/managed-by: tofu-helm
      app.kubernetes.io/name: ${id_label}
      app.kubernetes.io/part-of: monitoring
      app.kubernetes.io/stage: ${stage}
      app.kubernetes.io/version: ${chart_version}
    hosts:
      - ${domain_name}
    tls:
      - hosts:
          - ${domain_name}
    path: /

  resources:
    limits:
      cpu: 1
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 200Mi

  persistence:
    accessModes:
      - ReadWriteOnce
    enabled: true
    size: 20Gi
    storageClassName: ${id_label}
    type: sts
