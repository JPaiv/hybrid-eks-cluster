authentik:
  # AWS RDS
  postgresql:
    host: ${RDS_HOST}
    name: ${RDS_NAME}
    port: ${RDS_PORT}
  # AWS Elasticache Redis
  redis:
    host: ${REDIS_HOST}
    port: ${REDIS_PORT}
    tls: true
    tls_reqs: required

server:
  replicas: 4
  serviceAccountName: ${IRSA_NAME}
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 2
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage: 60
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 200Mi
  ingress:
    enabled: true
    ingressClassName: alb
    hosts:
      - ${INGRESS_URL}
    tls:
      - hosts:
          - ${INGRESS_URL}
    annotations:
      # Core ALB Behavior
      alb.ingress.kubernetes.io/load-balancer-attributes: routing.http2.enabled=true
      alb.ingress.kubernetes.io/load-balancer-name: ${NAME_LABEL}
      alb.ingress.kubernetes.io/scheme: internet-facing
      alb.ingress.kubernetes.io/target-type: ip
      # Listener, TLS, and Redirection Rules
      alb.ingress.kubernetes.io/actions.ssl-redirect: '{"Type": "redirect", "RedirectConfig": { "Protocol": "HTTPS", "Port": "443", "StatusCode": "HTTP_301"}}'
      alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
      alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
      # Backend Target Group and Health Checks
      alb.ingress.kubernetes.io/backend-protocol: HTTP
      alb.ingress.kubernetes.io/healthcheck-interval-seconds: "30"
      alb.ingress.kubernetes.io/healthcheck-path: "/-/health/live/"
      alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
      alb.ingress.kubernetes.io/success-codes: "200"
  env:
    - name: AUTHENTIK_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_SECRET_KEY
    - name: AUTHENTIK_REDIS__PASSWORD
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_REDIS__PASSWORD
    - name: AUTHENTIK_POSTGRESQL__PASSWORD
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_POSTGRESQL__PASSWORD
    - name: AUTHENTIK_BOOTSTRAP_PASSWORD
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_BOOTSTRAP_PASSWORD
    - name: AUTHENTIK_BOOTSTRAP_TOKEN
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_BOOTSTRAP_TOKEN

worker:
  enabled: true
  replicas: 4 # Start with 2 replicas before autoscaler takes over
  autoscaling:
    enabled: false
    maxReplicas: 10
    minReplicas: 2
    targetCPUUtilizationPercentage: 80
    targetMemoryUtilizationPercentage: 80
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 200m
      memory: 200Mi
  env:
    - name: AUTHENTIK_SECRET_KEY
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_SECRET_KEY
    - name: AUTHENTIK_REDIS__PASSWORD
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_REDIS__PASSWORD
    - name: AUTHENTIK_POSTGRESQL__PASSWORD
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_POSTGRESQL__PASSWORD
    - name: AUTHENTIK_BOOTSTRAP_PASSWORD
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_BOOTSTRAP_PASSWORD
    - name: AUTHENTIK_BOOTSTRAP_TOKEN
      valueFrom:
        secretKeyRef:
          name: ${SECRET_LABEL}
          key: AUTHENTIK_BOOTSTRAP_TOKEN

postgresql:
  enabled: false

redis:
  enabled: false
